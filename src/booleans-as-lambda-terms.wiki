%template math
== Booleans as lambda terms ==
Church's thesis: everything computable can be defined in pure untyped lambda calculus

=== Finding booleans ===
Try to find two different closed normal terms that let us calculate.
1. Two normal terms: x, y
2. Closed: λx.x, λy.y
    * but these are alpha-equivalent!
3. Different: λx.y.x, λx.y.y

Therefore:
* true = λxy.x
* false = λxy.y

=== Negation ===
* not true =β false
* not false =β true

Deriving the definition for 'not':

{{{
(not) (true)
(λu.u__) (true) => replace the u with true.
true takes two arguments and returns first (by definition above).
therefore two arguments must be false, true.
}}}

∴ not = λx.x false true

Verifying:

{{{
(not) (true)
=> (λu.u false true) (true)
=> (true) (false) (true)
=> (λxy.x) (false) (true)
=> false
}}}

not true == false, so definition is OK

